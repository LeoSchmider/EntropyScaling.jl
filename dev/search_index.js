var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started-with-EntropyScaling.jl","page":"Getting Started","title":"Getting Started with EntropyScaling.jl","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"...","category":"page"},{"location":"models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Pages = [\"models.md\"]","category":"page"},{"location":"models/#Chapman-Enskog-Models","page":"Models","title":"Chapman-Enskog Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Chapman-Enskog model the for transport properties at the zero-density limit based on the kinetic gas theory.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"beginaligned\neta_varrho rightarrow 0              = frac516 sqrtfracM k_rm B Tpi N_rm A frac1sigma^2 Omega^(22) \nlambda_varrho rightarrow 0\t          = frac7564 k_rm B sqrtfracR TM pi frac1sigma^2 Omega^(22)\nD_varrho rightarrow 0 varrho^rm m = frac38 sqrtfracM k_rm B Tpi N_rm A frac1sigma^2 Omega^(11)\nendaligned","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"EntropyScaling.ChapmanEnskogModel\nEntropyScaling.Ω","category":"page"},{"location":"models/#EntropyScaling.ChapmanEnskogModel","page":"Models","title":"EntropyScaling.ChapmanEnskogModel","text":"ChapmanEnskogModel <: AbstractTransportPropertyModel\n\nChapman-Enskog transport properties for the zero-density limit.\n\nFields\n\nσ::Vector{T}: Lennard-Jones size parameter ([σ] = m)\nε::Vector{T}: Lennard-Jones energy parameter ([ε] = J)\nMw::Vector{T}: molar mass ([Mw] = kg mol⁻¹)\ncollision::C: collision integral method (KimMonroe() (default) or Neufeld(), see Ω)\n\nConstructors\n\nChapmanEnskogModel(components; collision_integral=KimMonroe())*  \nChapmanEnskogModel(components, σ, ε, Mw; collision_integral=KimMonroe())\n\nInput arguments can either be single values (pure) or vectors.  In case no parameters are provided, values are taken Poling et al. (2001) or Yang et al. (2022) (if available). Mixture properties are calculated according to the models from Wilke (1950) (viscosity), Mason and Saxen (1958) (thermal conductivity), and Miller and Carman (1961) (self-diffusion coefficient). [* to be implemented]\n\nReferences\n\nB. E. Poling, J. M. Prausnitz, and J. P. O’Connell: The Properties of Gases and Liquids, 5th, ed. McGraw-Hill, New York (2001).\nX. Yang, X. Xiao, M. Thol, M. Richter, and I. H. Bell: Linking Viscosity to Equations of State Using Residual Entropy Scaling Theory, Int. J. Thermophys. 43 (2022) 183, DOI: https://doi.org/10.1007/s10765-022-03096-9.\nC. R. Wilke: A Viscosity Equation for Gas Mixtures, The Journal of Chemical Physics 18 (1950) 517–519, DOI: https://doi.org/10.1063/1.1747673.\nE. A. Mason and S. C. Saxena: Approximate Formula for the Thermal Conductivity of Gas Mixtures, The Physics of Fluids 1 (1958) 361–369, DOI: https://doi.org/10.1063/1.1724352.\nL. Miller and P. C. Carman: Self-Diffusion in Mixtures. Part 4. – Comparison of Theory and Experiment for Certain Gas Mixtures, Trans. Faraday Soc. 57 (1961) 2143–2150, DOI: https://doi.org/10.1039/TF9615702143.\n\n\n\n\n\n","category":"type"},{"location":"models/#EntropyScaling.Ω","page":"Models","title":"EntropyScaling.Ω","text":"Ω(poperty::AbstractTransportProperty, model::AbstractChapmanEnskogModel, T)\n\nCalculates the collision integral for a given model and property (Ω₁₁ for diffusion coefficients and Ω₂₂ for viscosity/thermal conductivity) at the specified temperature T.\n\nTwo methods are implemented:\n\nKimMonroe(): Kim and Monroe (2014) and\nNeufeld(): Neufeld et al. (1972)\n\nReferences\n\nS. U. Kim and C. W. Monroe: High-Accuracy Calculations of Sixteen Collision Integrals for Lennard-Jones (12-6) Gases and Their Interpolation to Parameterize Neon, Argon, and Krypton, Journal of Computational Physics 273 (2014) 358–373, DOI: https://doi.org/10.1016/j.jcp.2014.05.018.\nP. D. Neufeld, A. R. Janzen, and R. A. Aziz: Empirical Equations to Calculate 16 of the Transport Collision Integrals Ω(l,s)* for the Lennard‐Jones (12–6) Potential, The Journal of Chemical Physics 57 (1972) 1100–1102, DOI: https://doi.org/10.1063/1.1678363.\n\n\n\n\n\n","category":"function"},{"location":"models/#Entropy-Scaling-Models","page":"Models","title":"Entropy Scaling Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Entropy scaling makes use of the fact that transport properies can be scaled such that the scaled transport property Y^rm s is a univariate function of the configurational (or  residual) entropy s_rm conf, i.e. ","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Y^rm s = Y^rm sleft(s_rm confright)","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Entropy scaling enables the prediction of transport porperties in all fluid phases.","category":"page"},{"location":"models/#Available-Models","page":"Models","title":"Available Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"EntropyScaling.FrameworkModel\nEntropyScaling.RefpropRESModel","category":"page"},{"location":"models/#EntropyScaling.FrameworkModel","page":"Models","title":"EntropyScaling.FrameworkModel","text":"FrameworkModel{T} <: AbstractEntropyScalingModel\n\nA generic entropy scaling model.\n\n\n\n\n\n","category":"type"},{"location":"models/#EntropyScaling.RefpropRESModel","page":"Models","title":"EntropyScaling.RefpropRESModel","text":"RefpropRESModel{T} <: AbstractEntropyScalingModel\n\nEntropy scaling model based on Refprop EOS.\n\nReferences\n\n\n\n\n\n","category":"type"},{"location":"models/#Fitting-Entropy-Scaling-Parameters","page":"Models","title":"Fitting Entropy Scaling Parameters","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"[Work in progress]","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Some entropy scaling models allow the fitting of substance-specific parameters to experimental data. Therefore, a unified interface is provided including the handling of the data and the fit options.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Fitting Procedure","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Loading experimental data\nFitting\nPlotting results and saving the parameters","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Example","category":"page"},{"location":"transport_properties/#Transport-Properties","page":"Transport Properties","title":"Transport Properties","text":"","category":"section"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"After constructing a model, transport properties can be calculated (if respective parameters are available). The call for all this is always of the form:","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"transport_property(model, p, T, x=[1.]; phase=:unkwown)","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"where","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"model is a AbstractTransportPropertyModel,\np is the pressure ([p] = Pa),\nT is the temperature ([T] = K),\nx is the mole fraction ([x] = mol mol⁻¹), and\nphase is the desired phase (liquid or gas) used in the volume solver.","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"Internally, the density is always calculated first and then the function EntropyScaling.ϱT_transport_property(model, ϱ, T, x) is called (with [ϱ] = mol m⁻³).","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"EntropyScaling.viscosity\nEntropyScaling.thermal_conductivity\nEntropyScaling.self_diffusion_coefficient\nEntropyScaling.MS_diffusion_coefficient","category":"page"},{"location":"transport_properties/#EntropyScaling.viscosity","page":"Transport Properties","title":"EntropyScaling.viscosity","text":"viscosity(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nViscosity η(p,T,x) ([η] = Pa s).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.thermal_conductivity","page":"Transport Properties","title":"EntropyScaling.thermal_conductivity","text":"thermal_conductivity(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nThermal conductivity λ(p,T,x) ([λ] = W m⁻¹ K⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.self_diffusion_coefficient","page":"Transport Properties","title":"EntropyScaling.self_diffusion_coefficient","text":"self_diffusion_coefficient(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nSelf-diffusion coefficient D(p,T,x) ([D] = m² s⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.MS_diffusion_coefficient","page":"Transport Properties","title":"EntropyScaling.MS_diffusion_coefficient","text":"MS_diffusion_coefficient(model::EntropyScalingModel, p, T, z; phase=:unknown)\n\nMaxwell-Stefan diffusion coefficient Ð(p,T,x) ([Ð] = m² s⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"#EntropyScaling.jl","page":"Home","title":"EntropyScaling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Transport property modeling based on entropy scaling and equations of state (EOS).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides methods to model ","category":"page"},{"location":"","page":"Home","title":"Home","text":"the viscosity,\nthe thermal conductivity, and\ndiffusion coefficients","category":"page"},{"location":"","page":"Home","title":"Home","text":"in a physically sound way. For the EOS calculations, additional packages need to be imported. Alternatively, custom EOS functions can be defined. Implementations of EOS models are not included in this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Entropy scaling makes use of the fact that transport properies can be scaled such that the scaled transport property Y^rm s is a univariate function of the configurational (or  residual) entropy s_rm conf, i.e.  Y^rm s = Y^rm sleft(s_rm confright)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Entropy scaling enables the prediction of transport porperties in all fluid phases based on  few experimental data.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Available-Transport-Property-Models","page":"Home","title":"Available Transport Property Models","text":"","category":"section"},{"location":"#Compatible-EOS-Model-Packages","page":"Home","title":"Compatible EOS Model Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"...","category":"page"}]
}

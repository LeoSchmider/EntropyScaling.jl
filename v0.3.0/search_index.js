var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started-with-EntropyScaling.jl","page":"Getting Started","title":"Getting Started with EntropyScaling.jl","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"...","category":"page"},{"location":"models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Pages = [\"models.md\"]","category":"page"},{"location":"models/#Chapman-Enskog-Models","page":"Models","title":"Chapman-Enskog Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Chapman-Enskog model the for transport properties at the zero-density limit based on the kinetic gas theory.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"beginaligned\neta_varrho rightarrow 0              = frac516 sqrtfracM k_rm B Tpi N_rm A frac1sigma^2 Omega^(22) \nlambda_varrho rightarrow 0\t          = frac7564 k_rm B sqrtfracR TM pi frac1sigma^2 Omega^(22)\nD_varrho rightarrow 0 varrho^rm m = frac38 sqrtfracM k_rm B Tpi N_rm A frac1sigma^2 Omega^(11)\nendaligned","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"EntropyScaling.ChapmanEnskogModel\nEntropyScaling.Ω","category":"page"},{"location":"models/#EntropyScaling.ChapmanEnskogModel","page":"Models","title":"EntropyScaling.ChapmanEnskogModel","text":"ChapmanEnskogModel <: AbstractTransportPropertyModel\n\nChapman-Enskog transport properties for the zero-density limit.\n\nFields\n\nσ::Vector{T}: Lennard-Jones size parameter ([σ] = m)\nε::Vector{T}: Lennard-Jones energy parameter ([ε] = J)\nMw::Vector{T}: molar mass ([Mw] = kg mol⁻¹)\ncollision::C: collision integral method (KimMonroe() (default) or Neufeld(), see Ω)\n\nConstructors\n\nChapmanEnskogModel(components; collision_integral=KimMonroe())\nChapmanEnskogModel(components, σ, ε, Mw; collision_integral=KimMonroe(), ref=\"\", ref_id=\"\")\n\nInput arguments can either be single values (pure) or vectors.  In case no parameters are provided, values are taken Poling et al. (2001) or Yang et al. (2022) (if available). The keywords ref (short reference) and ref_id (DOI or ISBN) enable the specification of the reference. Mixture properties are calculated according to the models from Wilke (1950) (viscosity), Mason and Saxen (1958) (thermal conductivity), and Miller and Carman (1961) (self-diffusion coefficient).\n\nExample\n\nusing EntropyScaling \n\n# Construction with custom parameters\nσ, ε, Mw = 3.758e-10, 148.6*EntropyScaling.kB, 16.043e-3            # from Poling et al.\nmodel_methane = ChapmanEnskogModel(\"methane\",σ,ε,Mw)\n\nη_mix = viscosity(model_methane, NaN, 300.)\nD_mix = self_diffusion_coefficient(model_methane, NaN, 300.)\n\n# Construction from database\nmodel_mix = ChapmanEnskogModel([\"butane\",\"methanol\"]; ref=\"Poling et al. (2001)\")\n\nη_mix = viscosity(model_mix, NaN, 300., [.5,.5])\nD_mix = self_diffusion_coefficient(model_mix, NaN, 300., [.5,.5])  \n\nReferences\n\nB. E. Poling, J. M. Prausnitz, and J. P. O’Connell: The Properties of Gases and Liquids, 5th, ed. McGraw-Hill, New York (2001).\nX. Yang, X. Xiao, M. Thol, M. Richter, and I. H. Bell: Linking Viscosity to Equations of State Using Residual Entropy Scaling Theory, Int. J. Thermophys. 43 (2022) 183, DOI: https://doi.org/10.1007/s10765-022-03096-9.\nC. R. Wilke: A Viscosity Equation for Gas Mixtures, The Journal of Chemical Physics 18 (1950) 517–519, DOI: https://doi.org/10.1063/1.1747673.\nE. A. Mason and S. C. Saxena: Approximate Formula for the Thermal Conductivity of Gas Mixtures, The Physics of Fluids 1 (1958) 361–369, DOI: https://doi.org/10.1063/1.1724352.\nL. Miller and P. C. Carman: Self-Diffusion in Mixtures. Part 4. – Comparison of Theory and Experiment for Certain Gas Mixtures, Trans. Faraday Soc. 57 (1961) 2143–2150, DOI: https://doi.org/10.1039/TF9615702143.\n\n\n\n\n\n","category":"type"},{"location":"models/#EntropyScaling.Ω","page":"Models","title":"EntropyScaling.Ω","text":"Ω(poperty::AbstractTransportProperty, model::AbstractChapmanEnskogModel, T)\n\nCalculates the collision integral for a given model and property (Ω₁₁ for diffusion coefficients and Ω₂₂ for viscosity/thermal conductivity) at the specified temperature T.\n\nTwo methods are implemented:\n\nKimMonroe(): Kim and Monroe (2014) and\nNeufeld(): Neufeld et al. (1972)\n\nReferences\n\nS. U. Kim and C. W. Monroe: High-Accuracy Calculations of Sixteen Collision Integrals for Lennard-Jones (12-6) Gases and Their Interpolation to Parameterize Neon, Argon, and Krypton, Journal of Computational Physics 273 (2014) 358–373, DOI: https://doi.org/10.1016/j.jcp.2014.05.018.\nP. D. Neufeld, A. R. Janzen, and R. A. Aziz: Empirical Equations to Calculate 16 of the Transport Collision Integrals Ω(l,s)* for the Lennard‐Jones (12–6) Potential, The Journal of Chemical Physics 57 (1972) 1100–1102, DOI: https://doi.org/10.1063/1.1678363.\n\n\n\n\n\n","category":"function"},{"location":"models/#Entropy-Scaling-Models","page":"Models","title":"Entropy Scaling Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Entropy scaling makes use of the fact that transport properies can be scaled such that the scaled transport property Y^rm s is a univariate function of the configurational (or  residual) entropy s_rm conf, i.e. ","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Y^rm s = Y^rm sleft(s_rm confright)","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Entropy scaling enables the prediction of transport porperties in all fluid phases.","category":"page"},{"location":"models/#Models-2","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"All models are similarly structured with the following fields:","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"components::Vector{String}: names of the chemical components of the system\nparams::Vector{ModelParams}: vector of model-specific paramater objects\neos: EOS model","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"The ModelParams are model-specific types containing all required parameters of the model. They always contain the Chapman-Enskog model (CE_model) as well as base parameters (base) which itself contains general parameters like the transport  property or the molar mass.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"All models share the contructor method Model(eos, params::Dict{P}), where params is a dict  containing the parameters with the respective transport property as key, e.g.,  Dict(Viscosity() => [a_η, b_η, c_η], ThermalConductivity() => [a_λ, b_λ, c_λ]). Here, a, b, and c are the parameters (note that a_η, b_η, ... are vectors or matrices themselfs). Lists of the parameters are given below in the repective 'Parameters' sections. Additional model-specific constructors are also given below.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"EntropyScaling.FrameworkModel\nEntropyScaling.RefpropRESModel","category":"page"},{"location":"models/#EntropyScaling.FrameworkModel","page":"Models","title":"EntropyScaling.FrameworkModel","text":"FrameworkModel{T} <: AbstractEntropyScalingModel\n\nEntropy scaling framework from Schmitt et al. (2024).\n\nThe entropy scaling framework provides a physical way to model transport properties  (viscosity, thermal conductivity, diffusion coeffficients) based on molecular-based EOS. It enables fitting new models using only few experimental data.\n\nParameters\n\nα::Matrix{T}: component-specific parameters (size: 5 x N_components)\n\nm (segment parameter of molecular-based EOS) and Y₀⁺min (minimum of the scaled  zero-density transport property) are additional internal parameters (not to be set at  construction).\n\nConstructors\n\nFrameworkModel(eos, params::Dict{P})\n\nDefault constructor (see above).\n\nFrameworkModel(eos, datasets::Vector{TransportPropertyData}; \n    opts::FitOptions=FitOptions(), \n    solute=nothing\n)\n\nConstructor for fitting new parameters α to experimental data (only applicable to pure components). datasets needs to be a vector containing TransportPropertyData. opts enables controling the fitting procedure through FitOptions. solute should be an EOS model of the solute (only applicable when fitting diffusion coeffficients at infinite dilution).\n\nExample\n\nusing EntropyScaling, Clapeyron\n\n# Load experimental sample data for n-butane\n(T_exp,ϱ_exp,η_exp) = EntropyScaling.load_sample_data()\ndata = ViscosityData(T_exp, [], ϱ_exp, η_exp, :unknown)\n\n# Create EOS model\neos_model = PCSAFT(\"butane\")\n\n# Create entropy scaling model (fit of parameters)\nmodel = FrameworkModel(eos_model, [data])\n\n# Calculation of the viscostiy at state\nη = viscosity(model, 0.1e6, 300.)\n\nReference\n\nS. Schmitt, H. Hasse, and S. Stephan: Entropy Scaling Framework for Transport Properties Using Molecular-Based Equations of State, Journal of Molecular Liquids 395 (2024) 123811, DOI: https://doi.org/10.1016/j.molliq.2023.123811.\n\n\n\n\n\n","category":"type"},{"location":"models/#EntropyScaling.RefpropRESModel","page":"Models","title":"EntropyScaling.RefpropRESModel","text":"RefpropRESModel{T} <: AbstractEntropyScalingModel\n\nEntropy scaling model based on Refprop EOS from Yang et al. (2022).\n\nA database provides ready-to-use models for the viscosity of several fluids. The model can favourably be used in combination with Clapeyron.jl and Coolprop.jl (see examples).\n\nParameters\n\nn::Matrix{T}: component-specific or global (group) parameters\nξ::Vector{T}: component-specific scaling parameter in case global parameters are used (ξ = 1 for individual fits)\nσ::Vector{T}: LJ size parameter for the Chapman-Enskog model \nε::Vector{T}: LJ energy parameter for the Chapman-Enskog model\n\nConstructors\n\nRefpropRESModel(eos, params::Dict{P})\n\nDefault constructor (see above).\n\nRefpropRESModel(eos, components)\nRefpropRESModel(components)         -> only works with `Clapeyron.jl` and `Coolprop.jl`\n\nCreates a ES model using the parameters provided in the database (recommended).\n\nExample\n\nusing EntropyScaling, Clapeyron, CoolProp\n\nmodel_pure = RefpropRESModel(\"R134a\")\nη_pure = viscosity(model_pure, 1e5, 300.; phase=:liquid)\n\nmodel_mix = RefpropRESModel([\"decane\",\"butane\"])\nη_mix = viscosity(model_mix, 1e5, 300., [.5,.5])\n\nReferences\n\nX. Yang, X. Xiao, M. Thol, M. Richter, and I. H. Bell: Linking Viscosity to Equations of State Using Residual Entropy Scaling Theory, Int. J. Thermophys. 43 (2022) 183, DOI: https://doi.org/10.1007/s10765-022-03096-9.\n\n\n\n\n\n","category":"type"},{"location":"models/#Fitting-Utilities","page":"Models","title":"Fitting Utilities","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Some entropy scaling models allow the fitting of substance-specific parameters to experimental data. Therefore, a unified interface is provided including the handling of the data and the fit options.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Fitting Procedure","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Loading experimental data and defining TransportPropertyData\nFitting (included in the model construction)\nPlotting results and saving the parameters","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"EntropyScaling.TransportPropertyData\nEntropyScaling.FitOptions","category":"page"},{"location":"models/#EntropyScaling.TransportPropertyData","page":"Models","title":"EntropyScaling.TransportPropertyData","text":"TransportPropertyData(prop, T, p, ϱ, η, phase=:unknown)\nViscosityData(T, p, ϱ, η, phase=:unknown)\nThermalConductivityData(T, p, ϱ, λ, phase=:unknown)\nSelfDiffusionCoefficientData(T, p, ϱ, D, phase=:unknown)\nInfDiffusionCoefficientData(T, p, ϱ, D, phase=:unknown)\n\nConstructor for TransportPropertyData. Either pressure p or density ϱ have to be specified. phase can also be a Vector{Symbol}.\n\nUnits\n\n[T] = K\n[p] = Pa\n[ϱ] = mol m⁻³\n[η] = Pa s\n[λ] = W (m K)⁻¹\n[D] = m² s⁻¹\n\n\n\n\n\n","category":"type"},{"location":"models/#EntropyScaling.FitOptions","page":"Models","title":"EntropyScaling.FitOptions","text":"FitOptions\n\nStruct to control fitting.\n\nFields\n\nwhat_fit::Dict{AbstractTransportProperty,Vector{Bool}}: specify which parameters to fit\n\nExample\n\n``` FitOptions(;     what_fit=Dict(         ThermalConductivity()=>ones(Bool,5),          SelfDiffusionCoefficient()=>Bool[0,0,0,1,1]) )\n\n\n\n\n\n","category":"type"},{"location":"transport_properties/#Transport-Properties","page":"Transport Properties","title":"Transport Properties","text":"","category":"section"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"After constructing a model, transport properties can be calculated (if respective parameters are available). The call for all this is always of the form:","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"transport_property(model, p, T, x=[1.]; phase=:unkwown)","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"where","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"model is a AbstractTransportPropertyModel,\np is the pressure ([p] = Pa),\nT is the temperature ([T] = K),\nx is the mole fraction ([x] = mol mol⁻¹), and\nphase is the desired phase (liquid or gas) used in the volume solver.","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"Internally, the density is always calculated first and then the function EntropyScaling.ϱT_transport_property(model, ϱ, T, x) is called (with [ϱ] = mol m⁻³).","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"EntropyScaling.viscosity\nEntropyScaling.thermal_conductivity\nEntropyScaling.self_diffusion_coefficient\nEntropyScaling.MS_diffusion_coefficient","category":"page"},{"location":"transport_properties/#EntropyScaling.viscosity","page":"Transport Properties","title":"EntropyScaling.viscosity","text":"viscosity(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nViscosity η(p,T,x) ([η] = Pa s).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.thermal_conductivity","page":"Transport Properties","title":"EntropyScaling.thermal_conductivity","text":"thermal_conductivity(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nThermal conductivity λ(p,T,x) ([λ] = W m⁻¹ K⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.self_diffusion_coefficient","page":"Transport Properties","title":"EntropyScaling.self_diffusion_coefficient","text":"self_diffusion_coefficient(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nSelf-diffusion coefficient D(p,T,x) ([D] = m² s⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.MS_diffusion_coefficient","page":"Transport Properties","title":"EntropyScaling.MS_diffusion_coefficient","text":"MS_diffusion_coefficient(model::EntropyScalingModel, p, T, z; phase=:unknown)\n\nMaxwell-Stefan diffusion coefficient Ð(p,T,x) ([Ð] = m² s⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"#EntropyScaling.jl","page":"Home","title":"EntropyScaling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Transport property modeling based on entropy scaling and equations of state (EOS).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides methods to model ","category":"page"},{"location":"","page":"Home","title":"Home","text":"the viscosity,\nthe thermal conductivity, and\ndiffusion coefficients","category":"page"},{"location":"","page":"Home","title":"Home","text":"in a physically sound way. For the EOS calculations, additional packages need to be imported. Alternatively, custom EOS functions can be defined. Implementations of EOS models are not included in this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Entropy scaling makes use of the fact that transport properies can be scaled such that the scaled transport property Y^rm s is a univariate function of the configurational (or  residual) entropy s_rm conf, i.e.  Y^rm s = Y^rm sleft(s_rm confright)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Entropy scaling enables the prediction of transport porperties in all fluid phases based on  few experimental data.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Available-Transport-Property-Models","page":"Home","title":"Available Transport Property Models","text":"","category":"section"},{"location":"#Compatible-EOS-Model-Packages","page":"Home","title":"Compatible EOS Model Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"...","category":"page"}]
}
